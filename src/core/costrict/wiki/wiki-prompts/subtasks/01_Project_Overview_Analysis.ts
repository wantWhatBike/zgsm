import { WIKI_OUTPUT_DIR, SUBTASK_OUTPUT_FILENAMES } from "./constants"

export const PROJECT_OVERVIEW_ANALYSIS_TEMPLATE = `# 项目技术概览分析

## 使用场景
生成项目的技术概述文档，包括项目定位、技术栈、开发规范等。

## 分析依据
- **完整代码仓库**: 项目的完整源代码
- **README文件**: 项目说明和使用指南
- **配置文件**: 项目配置和依赖管理
- **构建脚本**: 构建、测试、部署脚本

# 项目概述和技术总结分析任务

## 任务描述
请基于完整的代码仓库，生成项目的技术概述文档，为开发者提供项目的整体认知和技术指南。

## 分析维度

### 1. 项目定位和业务价值
#### 业务背景分析
- **项目定位**: 分析项目在业务生态中的作用和价值
- **目标用户**: 识别项目的主要用户群体和使用场景
- **核心功能**: 提取项目的核心业务功能和特色
- **技术优势**: 分析项目的技术亮点和竞争优势

#### 业务架构分析
\`\`\`
通过代码分析识别：
- 核心业务域和功能模块
- 用户角色和权限体系
- 业务流程和数据流转
- 系统边界和集成接口
\`\`\`

### 2. 技术栈深度分析
#### 后端技术栈
\`\`\`go
// 分析主要技术组件
- 编程语言
- Web框架
- ORM框架
- 数据库
- 消息队列
- 配置管理
- 日志处理
- 监控体系
\`\`\`

#### 基础设施技术
- **容器化**: Docker + Docker Compose
- **编排工具**: Kubernetes + Helm
- **CI/CD**: GitLab CI/Jenkins
- **监控告警**: Prometheus + AlertManager
- **日志聚合**: ELK Stack/Loki
- **链路追踪**: Jaeger/Zipkin

### 3. 代码架构和设计模式分析
#### 项目组织结构
\`\`\`
分析代码组织模式：
project/
├── cmd/                 # 服务入口点
│   ├── management/      # 管理服务
│   ├── collector/       # 收集服务
│   └── ...
├── internal/            # 内部代码
│   ├── api/            # API定义
│   ├── service/        # 业务逻辑
│   ├── repository/     # 数据访问
│   └── model/          # 数据模型
├── pkg/                # 公共代码
├── configs/            # 配置文件
├── scripts/            # 构建脚本
└── docs/               # 文档
\`\`\`

#### 设计模式应用
- **分层架构**: Controller-Service-Repository
- **依赖注入**: 依赖注入框架使用
- **工厂模式**: 对象创建和管理
- **观察者模式**: 事件驱动和消息处理
- **策略模式**: 算法封装和切换

### 4. 开发规范和最佳实践
#### 代码规范
- **命名规范**: 变量、函数、类的命名约定
- **代码风格**: 缩进、空格、注释规范
- **错误处理**: 统一的错误处理机制
- **日志规范**: 日志级别和格式要求

#### 工程实践
- **测试策略**: 单元测试、集成测试、E2E测试
- **代码审查**: Code Review流程和标准
- **版本管理**: Git工作流和分支策略
- **文档维护**: 代码注释和技术文档

### 5. 项目特色和创新点
#### 技术创新
- **架构创新**: 独特的架构设计思路
- **性能优化**: 性能优化策略和成果
- **安全设计**: 安全机制和防护措施
- **可扩展性**: 系统扩展能力设计

#### 业务价值
- **效率提升**: 开发效率或业务效率提升
- **成本优化**: 资源成本或运维成本优化
- **用户体验**: 用户体验改善和提升
- **技术影响**: 对行业或社区的技术贡献

## 输出格式要求

生成完整的项目技术概览文档：

### 文档结构
\`\`\`markdown
# {项目名称} 技术概览

## 项目概述

### 项目定位
- **项目名称**: {project_name}
- **项目类型**: {项目类型描述}
- **核心价值**: {核心价值描述}
- **目标用户**: {目标用户群体}

### 技术特色
- **架构特点**: {架构特色描述}
- **技术亮点**: {技术亮点列表}
- **创新点**: {技术创新点}
- **竞争优势**: {技术竞争优势}

## 技术栈分析

### 后端技术栈
| 技术类型 | 技术选型 | 版本 | 用途 |
|---------|---------|------|------|
| 编程语言 | Go | 1.21+ | 主要开发语言 |
| Web框架 | Echo | v4.10+ | HTTP框架 |
| ORM框架 | GORM | 1.25+ | 数据库操作 |
| 数据库 | PostgreSQL | 15+ | 主数据存储 |
| 缓存 | Redis | 7.0+ | 缓存和会话 |
| 消息队列 | Pulsar | 2.11+ | 消息中间件 |

### 基础设施技术
| 技术领域 | 技术选型 | 作用 |
|---------|---------|------|
| 容器化 | Docker | 应用容器化 |
| 编排工具 | Kubernetes | 容器编排 |
| CI/CD | GitLab CI | 持续集成部署 |
| 监控告警 | Prometheus | 指标监控 |
| 日志聚合 | ELK Stack | 日志收集分析 |
| 链路追踪 | Jaeger | 分布式追踪 |

## 架构设计

### 系统架构图
\`\`\`mermaid
graph TB
    subgraph "接入层"
        A[负载均衡] --> B[API网关]
    end
    
    subgraph "服务层"
        B --> C[Management服务]
        B --> D[Collector服务]
        B --> E[IDM服务]
    end
    
    subgraph "数据层"
        C --> F[(PostgreSQL)]
        D --> F
        E --> F
        C --> G[(Redis)]
        D --> H[(Pulsar)]
    end
    
    subgraph "基础设施"
        I[Kubernetes] --> C
        I --> D
        I --> E
    end
\`\`\`

### 分层架构
- **接入层**: 负载均衡、API网关、认证授权
- **服务层**: 业务微服务、服务治理、监控追踪
- **数据层**: 关系数据库、缓存、消息队列
- **基础设施**: 容器编排、CI/CD、监控告警

## 开发规范

### 代码规范
- **命名约定**: 驼峰命名、下划线分隔、前缀规范
- **代码风格**: gofmt格式化、golint检查、静态分析
- **错误处理**: 统一错误码、错误信息、异常处理
- **日志规范**: 结构化日志、日志级别、上下文信息

### 工程实践
- **测试策略**: 单元测试覆盖率>80%、集成测试、E2E测试
- **代码审查**: 强制Code Review、自动化检查、人工审核
- **版本管理**: Git Flow、分支保护、标签管理
- **文档维护**: 代码注释、API文档、架构文档

## 项目特色

### 技术创新
- **架构创新**: {架构创新点描述}
- **性能优化**: {性能优化策略和成果}
- **安全设计**: {安全机制和防护措施}
- **可扩展性**: {系统扩展能力设计}

### 业务价值
- **效率提升**: {开发效率或业务效率提升}
- **成本优化**: {资源成本或运维成本优化}
- **用户体验**: {用户体验改善和提升}
- **技术影响**: {对行业或社区的技术贡献}

## 快速开始

### 环境准备
- **开发环境**: Go 1.21+、Docker、Kubernetes
- **依赖服务**: PostgreSQL、Redis、Pulsar
- **开发工具**: VSCode、Go插件、Docker Desktop

### 构建运行
\`\`\`bash
# 克隆项目
git clone {repository_url}
cd {project_name}

# 安装依赖
go mod download

# 启动依赖服务
docker-compose up -d

# 构建项目
make build

# 运行服务
./bin/management
\`\`\`

## 贡献指南

### 开发流程
1. Fork项目仓库
2. 创建功能分支
3. 提交代码变更
4. 创建Pull Request
5. 代码审查和合并

### 联系方式
- **技术交流**: {技术交流群组}
- **问题反馈**: {问题反馈渠道}
- **贡献指南**: {贡献文档链接}
\`\`\`

## 特别注意事项
1. 必须基于实际代码进行分析，不能虚构技术栈
2. 重点分析项目的架构设计思路和技术选型原因
3. 关注项目的特色功能和创新点
4. 识别技术难点和解决方案
5. 提供实用的开发指导和最佳实践

## 输出文件命名
\`${WIKI_OUTPUT_DIR}${SUBTASK_OUTPUT_FILENAMES.PROJECT_OVERVIEW_TASK_FILE}\`
注意：如果${WIKI_OUTPUT_DIR} 目录不存在，则创建。

## 示例输出特征
基于项目的分析特征：
- 清晰的项目定位和技术特色描述
- 完整的技术栈表格化展示
- 详细的架构设计图和分层说明
- 实用的开发规范和最佳实践
- 具体的快速开始和贡献指南
`
