import { GENERAL_RULES_OUTPUT_DIR, WIKI_OUTPUT_DIR, SUBTASK_OUTPUT_FILENAMES } from "./constants"

export const PROJECT_RULES_GENERATION_TEMPLATE = `# 项目规则生成任务

## 使用场景
基于项目代码仓库深度分析，生成项目特异性的开发编码和测试约束规则文档。专注于"项目特有的，必须强制遵守的，不遵守会引起bug、系统崩溃、运行失败、项目架构风格破坏"的具体实施约束。

## 输入要求
- **项目索引文档**: ${WIKI_OUTPUT_DIR}${SUBTASK_OUTPUT_FILENAMES.INDEX_GENERATION_TASK_FILE}（**优先读取，了解项目技术文档结构和导航**）
- **项目技术文档**: ${WIKI_OUTPUT_DIR} 目录下的具体技术分析文档（**根据索引导航有选择性地读取相关文档**）
- **代码仓库**: 最多读取不超过30个核心代码或配置文件，跳过.roo目录、测试文件、临时文件和非核心功能代码文件

## 规则维度定义（根据项目实际情况选择性应用，可扩充维度，避免全面罗列）

## 核心代码开发约束识别

## 依赖管理约束
- **版本锁定约束**: 关键依赖版本固定、依赖冲突解决、安全版本要求
- **依赖注入约束**: DI容器配置、生命周期管理、循环依赖处理
- **包管理约束**: 包导入规范、内部包引用、第三方包评估

## 代码组织约束
- **目录结构约束**: 项目目录规范、包结构设计、文件命名规则
- **命名约束**: 变量命名规范、函数命名约定、类型命名标准
- **代码风格约束**: 代码格式化规则、注释编写标准、文档生成要求

## 数据库操作约束
- **连接管理约束**: 连接池最大/最小连接数、连接超时时间、空闲连接回收策略、连接泄漏检测、连接健康检查
- **事务处理约束**: 事务隔离级别、超时时间、嵌套事务处理、死锁检测机制、事务回滚策略、分布式事务处理
- **查询优化约束**: 慢查询阈值、索引使用规范、分页查询限制、批量操作大小限制、查询缓存策略
- **数据迁移约束**: 迁移脚本版本控制、回滚策略、数据一致性检查、迁移执行权限、增量迁移支持、迁移进度监控
- **分库分表约束**: 分片键选择规范、跨分片查询限制、分片路由规则、数据重平衡策略、分片扩容机制
- **读写分离约束**: 主从延迟处理、读写路由规则、故障切换机制、数据一致性保证、从库负载均衡、同步状态监控

## API开发约束
- **请求处理约束**: 请求头验证规则、参数校验策略、请求体大小限制、超时时间设置、请求ID生成、请求日志记录
- **响应格式约束**: 统一响应结构、错误码映射规则、分页响应格式、数据序列化规范、响应压缩策略、国际化支持
- **认证授权约束**: JWT token格式、权限验证流程、会话管理策略、API密钥管理、多租户权限隔离、权限缓存机制
- **版本控制约束**: URL版本策略、向后兼容规则、废弃API处理、版本迁移计划、版本文档维护
- **限流熔断约束**: 请求频率限制、熔断器配置、降级策略、流量控制规则、限流算法选择、熔断恢复机制
- **接口文档约束**: OpenAPI规范遵循、文档自动生成、接口变更通知、测试用例维护、文档版本管理、示例代码提供

## 缓存使用约束
- **键命名约束**: 命名空间规范、键过期策略、键冲突避免、键长度限制、键版本管理
- **数据一致性约束**: 缓存更新策略、缓存穿透防护、缓存雪崩预防、数据同步机制、缓存失效策略、双写一致性
- **性能优化约束**: 缓存命中率要求、内存使用限制、序列化方式选择、批量操作优化、缓存预热策略
- **分布式缓存约束**: 集群配置规范、数据分片策略、故障转移机制、一致性哈希算法、节点扩缩容、数据迁移
- **缓存监控约束**: 性能指标收集、异常告警规则、容量规划策略、清理策略配置、命中率统计、热点数据识别

## 错误处理约束
- **异常分类约束**: 业务异常定义、系统异常处理、第三方异常包装、异常传播规则、异常等级划分
- **错误码约束**: 错误码分配规则、错误信息国际化、错误上下文记录、错误恢复策略、错误码文档维护、客户端错误处理
- **日志记录约束**: 日志级别使用、敏感信息脱敏、日志格式规范、日志轮转策略、结构化日志、日志聚合
- **监控告警约束**: 错误率阈值、告警规则配置、故障自动恢复、运维通知机制、告警收敛策略
- **用户体验约束**: 友好错误提示、错误页面设计、重试机制提供、帮助信息展示、错误反馈收集

## 并发处理约束
- **线程安全约束**: 共享资源保护、锁粒度控制、死锁避免策略、原子操作使用、无锁编程、线程池管理
- **异步处理约束**: 异步任务队列、回调函数管理、Promise/Future使用、异步异常处理、背压控制
- **资源管理约束**: 连接池管理、内存泄漏防护、文件句柄管理、网络资源释放、资源监控、资源回收
- **负载均衡约束**: 请求分发策略、健康检查机制、故障节点隔离、流量权重配置、负载算法选择
- **分布式锁约束**: 锁超时设置、锁重入处理、锁释放机制、锁竞争优化、锁监控、死锁检测

## 安全约束
- **输入验证约束**: 参数类型检查、长度限制验证、特殊字符过滤、SQL注入防护、XSS防护、CSRF防护
- **认证机制约束**: 密码强度要求、多因素认证、会话管理、令牌刷新策略、单点登录、账户锁定机制
- **授权控制约束**: RBAC权限模型、资源访问控制、API权限验证、数据权限过滤、权限继承、动态权限
- **数据保护约束**: 敏感数据加密、传输加密要求、数据脱敏规则、隐私信息处理、数据备份加密
- **安全审计约束**: 操作日志记录、安全事件监控、合规性检查、漏洞扫描要求、安全评估、渗透测试

## 性能约束
- **响应时间约束**: API响应时间SLA、数据库查询超时、第三方调用超时、页面加载时间、实时性要求
- **吞吐量约束**: 并发请求处理能力、数据处理速度、批量操作效率、系统容量规划、峰值处理能力、扩展性要求
- **资源使用约束**: CPU使用率限制、内存占用控制、磁盘IO优化、网络带宽管理、存储空间管理
- **缓存策略约束**: 缓存命中率目标、缓存更新频率、缓存容量规划、缓存预热策略、缓存淘汰算法
- **数据库性能约束**: 查询执行计划优化、索引使用效率、连接数控制、慢查询监控、读写分离、分库分表

## 配置管理约束
- **环境配置约束**: 多环境配置分离、配置文件格式、环境变量命名、配置验证规则、配置模板管理
- **敏感信息约束**: 密钥管理策略、配置加密要求、权限访问控制、配置审计日志、密钥轮换机制、安全存储
- **配置更新约束**: 热更新支持、配置版本控制、回滚机制、变更通知机制、配置同步、灰度发布
- **配置监控约束**: 配置一致性检查、配置漂移检测、配置使用统计、异常配置告警、配置依赖分析

## 部署约束
- **容器化约束**: Docker镜像构建规范、容器资源限制、健康检查配置、日志收集策略、镜像安全扫描、多阶段构建
- **编排约束**: Kubernetes部署配置、服务发现机制、负载均衡设置、滚动更新策略、资源配额管理
- **环境依赖约束**: 依赖服务检查、环境变量验证、网络连通性测试、存储挂载验证、服务启动顺序、依赖健康检查
- **监控集成约束**: 指标暴露规范、日志格式要求、追踪数据收集、告警规则配置、监控数据聚合
- **备份恢复约束**: 数据备份策略、灾难恢复计划、备份验证机制、恢复时间目标、备份存储管理、恢复测试

## 测试约束识别

## 单元测试约束
- **Mock框架约束**: Mock工具选择规范、Mock对象生成规则、Mock行为验证、Mock数据管理
- **测试覆盖率约束**: 代码覆盖率阈值、分支覆盖率要求、函数覆盖率标准、覆盖率报告格式
- **测试文件约束**: 测试文件命名规范、测试目录结构、测试用例组织、测试标签使用
- **断言约束**: 断言库选择、断言方式规范、错误消息格式、自定义断言实现

## 集成测试约束
- **环境配置约束**: 测试环境搭建、配置文件管理、环境变量设置、依赖服务启动
- **数据库测试约束**: 测试数据库选择、数据初始化脚本、事务回滚策略、数据清理机制
- **外部依赖约束**: 第三方服务Mock、API调用模拟、网络请求拦截、依赖注入配置
- **测试执行约束**: 测试执行顺序、并行测试控制、测试隔离策略、失败重试机制

## 接口测试约束
- **认证测试约束**: 认证头格式验证、Token有效性测试、权限边界测试、会话管理测试
- **参数验证约束**: 请求参数校验、边界值测试、异常参数处理、参数类型验证
- **响应验证约束**: 响应格式检查、状态码验证、响应时间测试、数据结构验证
- **契约测试约束**: API契约定义、契约验证规则、版本兼容性测试、契约变更管理

## 性能测试约束
- **负载测试约束**: 并发用户数设置、请求频率控制、测试持续时间、负载递增策略
- **压力测试约束**: 系统极限测试、资源耗尽场景、故障恢复测试、性能瓶颈识别
- **基准测试约束**: 性能基线建立、回归测试对比、性能指标监控、优化效果验证
- **容量测试约束**: 系统容量规划、扩展性测试、资源使用监控、容量预警设置

## 其它领域约束识别

## 监控集成约束
- **指标收集约束**: 业务指标定义、技术指标监控、自定义指标实现
- **链路追踪约束**: 追踪数据格式、Span标签规范、采样策略配置
- **健康检查约束**: 健康检查端点、检查项目定义、响应格式规范

## 输出格式要求

## 🔴 文档结构强制要求（必须严格遵守）

**文档结构必须严格遵循以下格式，不得有任何偏差**：

\`\`\`markdown
# {项目名称} 开发规范

## 依赖管理
- 🔴 必须使用React 18.2.0版本，禁止升级到19.x
- 🔴 TypeScript版本锁定在5.0.x，禁止使用5.1+的新特性
- 🟡 所有第三方依赖必须在package.json中锁定具体版本号
- 🟡 新增依赖必须经过团队评审，禁止随意添加

## 代码组织
- 🔴 所有组件必须放在src/components目录下，按功能分子目录
- 🔴 工具函数必须放在src/utils目录，文件名使用kebab-case
- 🟡 页面组件必须放在src/pages目录，与路由结构保持一致
- 🟡 类型定义必须放在src/types目录，按模块分文件

## 错误处理
- 🔴 所有异步操作必须使用try-catch包装，错误必须记录到日志系统
- 🔴 错误码必须使用统一的ErrorCode枚举，禁止自定义错误码
- 🟡 业务异常必须抛出BusinessException，包含错误码和错误信息
- 🟡 第三方服务调用失败必须重试3次，间隔1秒

## 测试要求
- 🔴 单元测试必须使用vitest，禁止使用jest
- 🔴 测试文件必须与源文件同目录，命名格式为*.test.ts
- 🟡 核心业务逻辑测试覆盖率不低于80%
- 🟡 组件测试必须使用@testing-library/react

## 数据库操作（如适用）
- 🔴 连接池最大连接数设置为20，超时时间30秒
- 🔴 所有查询必须使用prepared statements防止SQL注入
- 🟡 数据库迁移文件必须包含up和down方法
- 🟡 敏感数据查询必须记录操作日志

## API开发（如适用）
- 🔴 所有API响应必须包含requestId字段，格式为UUID v4
- 🔴 错误响应必须使用统一的ErrorResponse类型
- 🟡 API路径必须使用RESTful风格，版本号在URL中体现
- 🟡 请求参数验证必须在控制器层完成

## 安全约束（如适用）
- 🔴 所有用户输入必须经过HTML转义，防止XSS攻击
- 🔴 密码必须使用bcrypt加密，salt轮数为12
- 🟡 JWT token过期时间必须设置为2小时
- 🟡 敏感操作必须记录审计日志，包含用户ID和操作时间

## 性能约束（如适用）
- 🔴 API响应时间不得超过500ms，超时必须返回504状态码
- 🔴 数据库查询时间不得超过100ms，慢查询必须记录到监控系统
- 🟡 缓存命中率必须达到85%以上，否则触发告警
- 🟡 批量操作每次最多处理1000条记录

## 环境配置
- 🔴 环境变量必须使用MYAPP_前缀，如MYAPP_DATABASE_URL
- 🔴 配置文件必须使用.env格式，敏感信息不得提交到代码库
- 🟡 多环境配置必须分离管理（.env.dev、.env.prod）
- 🟡 配置项必须在启动时进行有效性验证
\`\`\`

## 输出文件命名
\`${GENERAL_RULES_OUTPUT_DIR}${SUBTASK_OUTPUT_FILENAMES.PROJECT_RULES_TASK_FILE}\`
注意：如果${GENERAL_RULES_OUTPUT_DIR} 目录不存在，则创建。

## 🔴 LLM核心约束（必须严格遵守，违反将导致输出无效）

## 🔴 领域分布比例强制要求

**必须严格遵守以下比例，不得有任何偏差**：
- **开发领域**（75%）：包括依赖管理、代码组织、错误处理、数据库、API、安全、性能等
- **测试领域**（15%）：包括单元测试、集成测试、接口测试、性能测试等
- **其它领域**（10%）：包括配置管理、部署约束、监控集成等

## 🔴 文档长度强制控制

**必须严格遵守以下长度限制，违反将导致输出无效**：
- **总长度**: 文件总长度严格控制在100行以内，超过100行将直接被拒绝
- **描述精度**: 每条规则描述必须简洁明了，一行完成，单行严格不超过50字
- **避免冗余**: 绝对禁止重复通用的编程最佳实践
- **零代码片段**：绝对禁止出现任何代码片段或代码示例

**违规后果**：
- 超过100行限制：输出将被直接拒绝，需要重新生成
- 单条规则超过50字：该规则将被视为无效
- 包含代码片段：整个文档将被视为无效

## 🔴 规则描述强制要求

**规则描述必须严格遵守以下要求**：
1. **简洁性**: 每条规则描述必须在一行内完成，禁止换行
2. **字数限制**: 单条规则描述严格不超过50字，超过即无效
3. **具体性**: 必须包含具体的数值、路径、版本或格式要求
4. **可验证性**: 规则必须是可以被验证的，禁止使用主观描述
5. **强制性**: 使用"必须"、"禁止"等强制性词汇，禁止使用"建议"、"可以"等模糊词汇

## 🔴 规则内容强制要求

**必须包含的具体信息（缺少任何一项将导致规则无效）**：
- **具体的配置值**: 如端口号、超时时间、连接数等，必须提供精确数值
- **具体的文件路径**: 如配置文件位置、目录结构要求，必须提供完整路径
- **具体的命名规范**: 如变量命名、文件命名、API路径命名，必须提供明确格式
- **具体的版本要求**: 如依赖版本、框架版本限制，必须提供精确版本号
- **具体的格式要求**: 如日志格式、响应格式、配置格式，必须提供明确格式规范

**绝对禁止包含的内容（出现任何一项将导致输出无效）**：
- 抽象的设计原则（如"保持代码简洁"、"遵循SOLID原则"）
- 通用的最佳实践（如"使用有意义的变量名"、"编写高质量代码"、"遵循DRY原则"）
- 模糊的建议（如"适当使用缓存"、"优化性能"）
- 无法验证的约束（如"代码应该易于理解"、"保持可维护性"）
- 任何代码片段或代码示例
- 任何解释性文字或注释
- 任何通用的编程建议（如"添加适当的注释"、"使用异常处理"）

## 规则示例:

**完全合规的规则示例**：
- 🔴 数据库连接池最大连接数必须设置为50，超时时间30秒
- 🔴 所有API请求必须包含X-Request-ID头，格式为UUID v4
- 🟡 测试文件必须放在__tests__目录下，命名格式为*.test.ts
- 🟡 环境变量必须使用MYAPP_前缀，如MYAPP_DATABASE_URL

**绝对禁止的规则示例**：
- ❌ 代码应该保持简洁和可读性（抽象原则）
- ❌ 适当使用设计模式（模糊建议）
- ❌ 遵循SOLID原则（通用最佳实践）
- ❌ 编写高质量的代码（无法验证）
- ❌ 使用有意义的变量名（通用最佳实践）
- ❌ 优化数据库查询性能（模糊建议）
- ❌ 添加适当的注释（通用最佳实践）
- ❌ 遵循DRY原则（通用最佳实践）
- ❌ 使用异常处理（通用最佳实践）
- ❌ 保持代码可维护性（无法验证）

## 🔴 规则优先级标记强制要求

**每条规则必须添加优先级标记，标记使用方式必须严格遵守**：
- 🔴
- 🟡
- 🟢

**优先级标记使用规范**：
1. 每条规则必须以优先级标记开头，后跟一个空格
2. 优先级标记必须使用指定的emoji符号
3. 禁止使用其他符号或文字替代优先级标记
4. 禁止在一条规则中使用多个优先级标记
5. 优先级标记后必须直接跟规则描述，禁止添加任何额外文字、说明或解释

## 🔴 结构格式强制约束

1. **标题层级**：必须严格按照"一级标题 -> 二级标题 -> 规则列表"的层级结构，绝对禁止使用三级标题
2. **二级标题**：必须使用"##"格式
3. **规则列表**：每条规则必须以"- "开头，后跟优先级标记和规则描述
4. **禁止添加**：任何额外的章节、说明、注释或代码片段
5. **禁止使用**：三级标题（###）、四级标题（####）或任何更深层次的标题结构

`