import { GENERAL_RULES_OUTPUT_DIR, WIKI_OUTPUT_DIR, SUBTASK_OUTPUT_FILENAMES } from "./constants"

export const PROJECT_RULES_GENERATION_TEMPLATE = `# ⚠️ 项目开发规则文档生成任务

## 任务描述
基于项目代码仓库深度分析，生成项目特异性的开发编码和测试约束规则文档。专注于"项目特有的，必须强制遵守的，不遵守会引起bug、系统崩溃、运行失败、项目架构风格破坏"的具体实施约束。

## 输入要求
- **文档索引**: ${WIKI_OUTPUT_DIR}${SUBTASK_OUTPUT_FILENAMES.INDEX_GENERATION_TASK_FILE}（优先读取）
- **技术文档**: 根据文档索引指引，选择性读取 ${WIKI_OUTPUT_DIR} 目录下相关分析文档
- **代码仓库**: 最多30个核心文件，跳过.roo、忽略文件、临时文件

## 🚨 重要提醒

### ❌ 绝对禁止项
- 抽象设计原则（"保持代码简洁"、"遵循SOLID原则"）
- 通用最佳实践（"使用有意义变量名"、"写注释"）
- 模糊建议（"适当使用缓存"、"优化性能"）
- 无法验证约束（"代码易于理解"、"架构清晰"）
- 超过60字的规则描述
- 缺少具体数值、路径、版本或格式
- 使用三级标题或复杂格式
- 代码片段或示例（包括任何形式的代码）
- 通用编程建议（"使用现代JavaScript特性"）

### 优先级标记（严格使用）
- 🔴 关键约束：违反导致系统故障或安全问题，必须使用"必须"、"禁止"、"严格"
- 🟡 重要约束：违反影响性能或可维护性，必须使用"必须"、"禁止"、"严格"
- 🟢 建议约束：违反影响代码质量，可以使用"建议"、"推荐"

### ✅ 必须遵守
- 每条规则必须有优先级标记：🔴🟡🟢
- 每条规则必须有强制性词汇：必须、禁止、严格
- 输出文档总长度必须≤150行，单条规则≤60字

** 规则示例（参考）**:

### 依赖管理示例
- ✅ 正确："- 🔴 必须使用React 18.2.0版本，禁止升级到19.x"
- ❌ 错误："- 🔴 使用稳定版本的React"
- ✅ 正确："- 🟡 package.json中所有依赖必须锁定具体版本号，如^1.2.3"
- ❌ 错误："- 🟡 依赖版本要固定"

### 代码组织示例
- ✅ 正确："- 🔴 组件必须放在src/components目录，按功能分子目录"
- ❌ 错误："- 🔴 组件要放在合适的位置"
- ✅ 正确："- 🟡 工具函数必须放在src/utils目录，使用kebab-case命名"
- ❌ 错误："- 🟡 工具函数命名要规范"

### 数据库示例
- ✅ 正确："- 🔴 数据库连接池最大连接数严格限制为20个"
- ❌ 错误："- 🔴 数据库连接池大小要合理设置"
- ✅ 正确："- 🟡 查询必须使用prepared statements，参数化查询防SQL注入"
- ❌ 错误："- 🟡 要注意SQL注入问题"

### API开发示例
- ✅ 正确："- 🔴 API响应时间不得超过500毫秒，超时返回504状态码"
- ❌ 错误："- 🔴 API响应时间要尽可能快"
- ✅ 正确："- 🟡 响应必须包含requestId字段，格式UUID v4"
- ❌ 错误："- 🟡 响应要包含请求ID"

### 环境配置示例
- ✅ 正确："- 🔴 所有环境变量必须使用APP_前缀，如APP_PORT、APP_DB_HOST"
- ❌ 错误："- 🔴 环境变量要有统一的前缀"
- ✅ 正确："- 🟡 配置文件使用.env格式，敏感信息不提交代码库"
- ❌ 错误："- 🟡 配置文件要注意安全"

### 测试要求示例
- ✅ 正确："- 🔴 单元测试必须使用vitest，文件命名*.test.ts"
- ❌ 错误："- 🔴 要写单元测试"
- ✅ 正确："- 🟡 核心业务逻辑测试覆盖率不低于80%"
- ❌ 错误："- 🟡 测试覆盖率要高"

## 格式约束（严格遵循）

### 📋 格式要求（违反即失败）
1. **标题层级**: 一级标题 -> 二级标题 -> 规则列表
2. **规则格式**: "- 优先级标记 规则描述"
3. **禁止使用**: 三级标题、额外章节、代码片段
4. **长度控制**: 总长度150行内，单条规则60字内

## 规则类别（选择性应用，可扩充）

### 开发约束（75%）
- **依赖管理**: 版本锁定、包管理、依赖注入配置等等
- **代码组织**: 目录结构、命名规范、文件组织等等
- **数据库**: 连接池、事务、查询优化、迁移等等
- **API开发**: 请求处理、响应格式、认证授权等等
- **错误处理**: 异常分类、错误码、日志记录等等
- **性能**: 响应时间、吞吐量、资源使用等等

### 测试约束（15%）
- **单元测试**: Mock框架、覆盖率、文件组织等等
- **集成测试**: 环境配置、数据库测试、依赖Mock等等
- **接口测试**: 认证、参数验证、响应验证等等

### 运维约束（10%）
- **配置管理**: 环境配置、敏感信息、更新机制等等
- **部署**: 容器化、编排、监控集成等等

### 📝 输出文档结构

\`\`\`markdown
# {项目名称} 开发规范

## 依赖管理
- 🔴 必须使用React 18.2.0版本，禁止升级到19.x
- 🟡 所有依赖必须在package.json中锁定具体版本号
- 🟢 建议使用pnpm作为包管理器，版本8.6.0+

## 代码组织
- 🔴 组件必须放在src/components目录，按功能分子目录
- 🟡 工具函数必须放在src/utils目录，使用kebab-case命名
- 🟢 建议每个组件目录包含index.ts导出文件

## 错误处理
- 🔴 异步操作必须使用try-catch，错误记录到日志系统
- 🟡 业务异常必须抛出BusinessException包含错误码
- 🟢 建议错误码使用4位数字格式，如1001-9999

## 测试要求
- 🔴 单元测试必须使用vitest，文件命名*.test.ts
- 🟡 核心业务逻辑测试覆盖率不低于80%
- 🟢 建议测试文件与源文件同级目录

## 数据库操作
- 🔴 连接池最大连接数20，超时时间30秒
- 🟡 查询必须使用prepared statements防SQL注入
- 🟢 建议复杂查询使用数据库视图

## API开发
- 🔴 响应必须包含requestId字段，格式UUID v4
- 🟡 API路径必须使用RESTful风格，版本号在URL中
- 🟢 建议使用OpenAPI 3.0规范文档

## 安全约束
- 🔴 用户输入必须HTML转义防XSS攻击
- 🟡 JWT token过期时间设置为2小时
- 🟢 建议使用HTTPS，TLS版本1.3+

## 性能约束
- 🔴 API响应时间不超过500ms，超时返回504
- 🟡 缓存命中率必须达到85%以上
- 🟢 建议使用CDN加速静态资源

## 环境配置
- 🔴 环境变量必须使用MYAPP_前缀
- 🟡 配置文件使用.env格式，敏感信息不提交代码库
- 🟢 建议使用配置中心管理环境变量
\`\`\`

## 输出文件
\`${GENERAL_RULES_OUTPUT_DIR}${SUBTASK_OUTPUT_FILENAMES.PROJECT_RULES_TASK_FILE}\`

## 文档自检清单（完成前必须检查）

### 🔍 内容检查（每项都必须满足）
- [ ] 每条规则都包含具体数值、路径、版本或格式等具体信息
- [ ] 没有抽象原则或通用最佳实践
- [ ] 所有规则都可验证和执行
- [ ] 使用了强制性词汇（必须、禁止、严格）
- [ ] 规则描述不超过60字
- [ ] 每条规则都有明确的可执行性

### 📐 结构检查（每项都必须满足）
- [ ] 文档总行数不超过150行
- [ ] 只有一级标题和二级标题
- [ ] 没有三级标题或额外章节
- [ ] 规则格式统一为"- 优先级标记 规则描述"
- [ ] 没有代码片段或示例
- [ ] 没有markdown表格或其他复杂格式
`
