import { RULES_OUTPUT_DIR, WIKI_OUTPUT_DIR } from "./constants"

export const PROJECT_RULES_GENERATION_TEMPLATE = `# 项目规则生成任务

## 使用场景
基于项目代码仓库深度分析，生成项目特异性的开发编码和测试约束规则文档。专注于"违反会导致系统性问题"的具体实施约束。

## 输入要求
- **项目技术文档**: ${WIKI_OUTPUT_DIR} 目录下的所有技术分析文档（优先分析）
- **完整代码仓库**: 项目源代码、配置文件、构建脚本
- **技术栈文档**: package.json、go.mod、依赖配置、框架选型说明
- **测试配置**: 测试框架配置、mock配置、测试数据配置

## 分析维度

### 1. 核心代码开发约束识别（70%）

#### 数据库操作约束
- **连接管理约束**: 连接池最大/最小连接数、连接超时时间、空闲连接回收策略、连接泄漏检测、连接健康检查
- **事务处理约束**: 事务隔离级别、超时时间、嵌套事务处理、死锁检测机制、事务回滚策略、分布式事务处理
- **查询优化约束**: 慢查询阈值、索引使用规范、分页查询限制、批量操作大小限制、查询缓存策略
- **数据迁移约束**: 迁移脚本版本控制、回滚策略、数据一致性检查、迁移执行权限、增量迁移支持、迁移进度监控
- **分库分表约束**: 分片键选择规范、跨分片查询限制、分片路由规则、数据重平衡策略、分片扩容机制
- **读写分离约束**: 主从延迟处理、读写路由规则、故障切换机制、数据一致性保证、从库负载均衡、同步状态监控

#### API开发约束
- **请求处理约束**: 请求头验证规则、参数校验策略、请求体大小限制、超时时间设置、请求ID生成、请求日志记录
- **响应格式约束**: 统一响应结构、错误码映射规则、分页响应格式、数据序列化规范、响应压缩策略、国际化支持
- **认证授权约束**: JWT token格式、权限验证流程、会话管理策略、API密钥管理、多租户权限隔离、权限缓存机制
- **版本控制约束**: URL版本策略、向后兼容规则、废弃API处理、版本迁移计划、版本文档维护
- **限流熔断约束**: 请求频率限制、熔断器配置、降级策略、流量控制规则、限流算法选择、熔断恢复机制
- **接口文档约束**: OpenAPI规范遵循、文档自动生成、接口变更通知、测试用例维护、文档版本管理、示例代码提供

#### 缓存使用约束
- **键命名约束**: 命名空间规范、键过期策略、键冲突避免、键长度限制、键版本管理
- **数据一致性约束**: 缓存更新策略、缓存穿透防护、缓存雪崩预防、数据同步机制、缓存失效策略、双写一致性
- **性能优化约束**: 缓存命中率要求、内存使用限制、序列化方式选择、批量操作优化、缓存预热策略
- **分布式缓存约束**: 集群配置规范、数据分片策略、故障转移机制、一致性哈希算法、节点扩缩容、数据迁移
- **缓存监控约束**: 性能指标收集、异常告警规则、容量规划策略、清理策略配置、命中率统计、热点数据识别

#### 错误处理约束
- **异常分类约束**: 业务异常定义、系统异常处理、第三方异常包装、异常传播规则、异常等级划分
- **错误码约束**: 错误码分配规则、错误信息国际化、错误上下文记录、错误恢复策略、错误码文档维护、客户端错误处理
- **日志记录约束**: 日志级别使用、敏感信息脱敏、日志格式规范、日志轮转策略、结构化日志、日志聚合
- **监控告警约束**: 错误率阈值、告警规则配置、故障自动恢复、运维通知机制、告警收敛策略
- **用户体验约束**: 友好错误提示、错误页面设计、重试机制提供、帮助信息展示、错误反馈收集

#### 并发处理约束
- **线程安全约束**: 共享资源保护、锁粒度控制、死锁避免策略、原子操作使用、无锁编程、线程池管理
- **异步处理约束**: 异步任务队列、回调函数管理、Promise/Future使用、异步异常处理、背压控制
- **资源管理约束**: 连接池管理、内存泄漏防护、文件句柄管理、网络资源释放、资源监控、资源回收
- **负载均衡约束**: 请求分发策略、健康检查机制、故障节点隔离、流量权重配置、负载算法选择
- **分布式锁约束**: 锁超时设置、锁重入处理、锁释放机制、锁竞争优化、锁监控、死锁检测

#### 安全约束
- **输入验证约束**: 参数类型检查、长度限制验证、特殊字符过滤、SQL注入防护、XSS防护、CSRF防护
- **认证机制约束**: 密码强度要求、多因素认证、会话管理、令牌刷新策略、单点登录、账户锁定机制
- **授权控制约束**: RBAC权限模型、资源访问控制、API权限验证、数据权限过滤、权限继承、动态权限
- **数据保护约束**: 敏感数据加密、传输加密要求、数据脱敏规则、隐私信息处理、数据备份加密
- **安全审计约束**: 操作日志记录、安全事件监控、合规性检查、漏洞扫描要求、安全评估、渗透测试

#### 性能约束
- **响应时间约束**: API响应时间SLA、数据库查询超时、第三方调用超时、页面加载时间、实时性要求
- **吞吐量约束**: 并发请求处理能力、数据处理速度、批量操作效率、系统容量规划、峰值处理能力、扩展性要求
- **资源使用约束**: CPU使用率限制、内存占用控制、磁盘IO优化、网络带宽管理、存储空间管理
- **缓存策略约束**: 缓存命中率目标、缓存更新频率、缓存容量规划、缓存预热策略、缓存淘汰算法
- **数据库性能约束**: 查询执行计划优化、索引使用效率、连接数控制、慢查询监控、读写分离、分库分表

#### 配置管理约束
- **环境配置约束**: 多环境配置分离、配置文件格式、环境变量命名、配置验证规则、配置模板管理
- **敏感信息约束**: 密钥管理策略、配置加密要求、权限访问控制、配置审计日志、密钥轮换机制、安全存储
- **配置更新约束**: 热更新支持、配置版本控制、回滚机制、变更通知机制、配置同步、灰度发布
- **配置监控约束**: 配置一致性检查、配置漂移检测、配置使用统计、异常配置告警、配置依赖分析

#### 部署约束
- **容器化约束**: Docker镜像构建规范、容器资源限制、健康检查配置、日志收集策略、镜像安全扫描、多阶段构建
- **编排约束**: Kubernetes部署配置、服务发现机制、负载均衡设置、滚动更新策略、资源配额管理
- **环境依赖约束**: 依赖服务检查、环境变量验证、网络连通性测试、存储挂载验证、服务启动顺序、依赖健康检查
- **监控集成约束**: 指标暴露规范、日志格式要求、追踪数据收集、告警规则配置、监控数据聚合
- **备份恢复约束**: 数据备份策略、灾难恢复计划、备份验证机制、恢复时间目标、备份存储管理、恢复测试

### 2. 测试约束识别（20%）

#### 单元测试约束
- **Mock框架约束**: Mock工具选择规范、Mock对象生成规则、Mock行为验证、Mock数据管理
- **测试覆盖率约束**: 代码覆盖率阈值、分支覆盖率要求、函数覆盖率标准、覆盖率报告格式
- **测试文件约束**: 测试文件命名规范、测试目录结构、测试用例组织、测试标签使用
- **断言约束**: 断言库选择、断言方式规范、错误消息格式、自定义断言实现

#### 集成测试约束
- **环境配置约束**: 测试环境搭建、配置文件管理、环境变量设置、依赖服务启动
- **数据库测试约束**: 测试数据库选择、数据初始化脚本、事务回滚策略、数据清理机制
- **外部依赖约束**: 第三方服务Mock、API调用模拟、网络请求拦截、依赖注入配置
- **测试执行约束**: 测试执行顺序、并行测试控制、测试隔离策略、失败重试机制

#### 接口测试约束
- **认证测试约束**: 认证头格式验证、Token有效性测试、权限边界测试、会话管理测试
- **参数验证约束**: 请求参数校验、边界值测试、异常参数处理、参数类型验证
- **响应验证约束**: 响应格式检查、状态码验证、响应时间测试、数据结构验证
- **契约测试约束**: API契约定义、契约验证规则、版本兼容性测试、契约变更管理

#### 性能测试约束
- **负载测试约束**: 并发用户数设置、请求频率控制、测试持续时间、负载递增策略
- **压力测试约束**: 系统极限测试、资源耗尽场景、故障恢复测试、性能瓶颈识别
- **基准测试约束**: 性能基线建立、回归测试对比、性能指标监控、优化效果验证
- **容量测试约束**: 系统容量规划、扩展性测试、资源使用监控、容量预警设置

### 3. 其它领域约束识别（10%）

#### 依赖管理约束
- **版本锁定约束**: 关键依赖版本固定、依赖冲突解决、安全版本要求
- **依赖注入约束**: DI容器配置、生命周期管理、循环依赖处理
- **包管理约束**: 包导入规范、内部包引用、第三方包评估

#### 代码组织约束
- **目录结构约束**: 项目目录规范、包结构设计、文件命名规则
- **命名约束**: 变量命名规范、函数命名约定、类型命名标准
- **代码风格约束**: 代码格式化规则、注释编写标准、文档生成要求

#### 监控集成约束
- **指标收集约束**: 业务指标定义、技术指标监控、自定义指标实现
- **链路追踪约束**: 追踪数据格式、Span标签规范、采样策略配置
- **健康检查约束**: 健康检查端点、检查项目定义、响应格式规范

## 输出格式要求

### 规则数量分布指导原则
- **开发领域约束（70%）**：重点关注项目核心开发约束，根据项目技术栈和架构特点选择相关维度
  - 从数据库操作、API开发、缓存使用、错误处理、并发处理、安全约束、性能约束、配置管理、部署约束等维度中选择项目相关的分类
  - 各分类的规则数量根据项目实际情况和复杂度确定，重点分类可包含更多规则

- **测试领域约束（20%）**：适度覆盖项目测试约束，根据项目测试策略选择相关维度
  - 从单元测试、集成测试、接口测试、性能测试等维度中选择项目相关的分类
  - 各分类的规则数量根据项目测试复杂度和覆盖需求确定

- **其它领域约束（10%）**：精简覆盖其他项目特有约束，根据项目组织和工具链选择相关维度
  - 从依赖管理、代码组织、监控集成等维度中选择项目相关的分类
  - 各分类的规则数量根据项目特定需求确定，保持精简但完整

### 维度选择原则
- 基于项目代码仓库分析结果，识别项目实际使用的技术栈和架构模式
- 优先选择对项目代码质量和系统稳定性影响最大的约束维度
- 确保生成的规则能够指导AI生成代码与既有项目代码风格和架构保持一致

生成的项目规则文档必须严格遵循以下格式：

### 文档结构模板
\`\`\`markdown
# {项目名称} Development Rules

## Database Operations
- 分库分表请求必须包含X-Database-Id头
- 数据库连接池最大连接数不超过50
- 事务超时时间必须设置为30秒
- 数据库迁移脚本必须包含回滚逻辑
- 查询语句必须使用参数化查询防止SQL注入

## API Development
- 所有接口必须包含Authorization和X-UserId请求头
- API响应必须使用统一的JSON结构格式
- 错误码必须使用项目定义的枚举值
- 接口版本控制必须在URL路径中体现
- 请求参数验证必须在控制器层完成

## Caching Strategy
- Redis key必须使用项目前缀"myapp:"
- 用户会话缓存过期时间30分钟，数据缓存24小时
- 分布式锁key必须使用"lock:myapp:"前缀
- 缓存更新必须使用写穿透模式
- 缓存失效必须使用主动清理策略

## Testing Requirements

- 单元测试必须使用gomock进行外部依赖mock
- 核心业务逻辑测试覆盖率不低于85%
- 测试文件必须以_test.go结尾
- 集成测试必须使用独立的测试数据库实例
- 测试环境配置必须使用test.env文件
- 第三方API依赖必须使用WireMock进行mock
- 接口测试必须包含Authorization和X-UserId请求头
- 测试数据必须使用fixtures目录下的JSON文件
- 测试用例必须包含正常和异常场景覆盖

## Framework & Libraries

- 框架版本必须精确锁定（如Echo v4.10.2）
- ORM库版本必须锁定（如GORM v1.25.0）
- JWT库版本必须锁定（如jwt-go v4.4.2）
- 中间件配置必须遵循项目标准
- 路由定义必须使用统一的命名规范

## Configuration Management
- 环境变量必须使用APP_前缀命名
- 配置文件必须使用YAML格式
- 敏感配置必须使用base64编码
- 多环境配置必须分离管理
- 配置验证必须在启动时完成

## Code Organization
- 使用项目特定的目录结构
- 文件命名必须遵循统一规范
- 模块导入必须按照指定顺序
- 包结构必须符合领域划分
- 代码注释必须使用标准格式

## Error Handling
- 使用项目统一的错误类型定义
- 错误信息必须包含具体的上下文信息
- 异常处理必须记录详细的错误日志
- 错误恢复策略必须符合业务需求
- 错误码必须使用项目标准枚举

## Performance Standards
- API响应时间必须满足具体的SLA要求
- 数据库查询必须使用索引优化
- 内存使用必须控制在指定范围内
- 并发处理必须使用项目标准配置
- 性能监控必须集成到CI/CD流程
\`\`\`

### 格式特点要求
- **简洁标题**: 使用"{项目名称} Development Rules"格式
- **分类组织**: 按功能模块清晰分组（如Database Operations、API Development等）
- **条目式规则**: 每个分类下使用简洁的破折号列表
- **具体指导**: 每条规则必须是具体的、可操作的约束
- **避免抽象**: 禁止包含抽象的设计原则和通用最佳实践

### 内容质量标准
- **项目特异性**: 100%的规则必须是项目特有的实施细节
- **可操作性**: 每条规则都有明确的实施方法
- **具体数值**: 包含具体的配置参数、版本号、阈值
- **验证可行性**: 规则应该可以通过工具或代码检查验证

### 文档长度控制
- **总长度**: 控制在20-100行
- **规则数量分布**:
  - 开发领域（70%）：根据项目技术栈复杂度确定各分类规则数量
  - 测试领域（20%）：根据项目测试策略确定各分类规则数量
  - 其它领域（10%）：根据项目特定需求确定各分类规则数量
- **描述精度**: 每条规则描述简洁明了，一行完成
- **避免冗余**: 不重复通用的编程最佳实践

## 输出文件命名
\`${RULES_OUTPUT_DIR}generated_rules.md\`
注意：如果${RULES_OUTPUT_DIR} 目录不存在，则创建。

## 示例输出特征
- 使用简洁的分类组织结构
- 专注于项目特有的技术约束
- 提供具体的实施细节和配置要求
- 避免抽象的架构原则和通用指导
- 重点关注可验证的具体约束规则`
